"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveCurrentWeatherData = exports.loadWeatherData = exports.getPosition = exports.state = void 0;

var _config = require("./config.js");

var _helper = require("./helper.js");

var moment = _interopRequireWildcard(require("moment-timezone"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

//State object
const state = {
  location: {
    //setting default location of paris
    lat: 48.8566969,
    lng: 2.3514616
  },
  tz: "Europe/Paris",
  current: {},
  daily: {},
  hourly: {},
  city: "Paris",
  country: "France"
};
exports.state = state;
const options = {
  enableHighAccuracy: true,
  timeout: 5000,
  maximumAge: 0
}; // Getting location using geolocation API

const getPosition = function () {
  return new Promise(function (resolve, reject) {
    navigator.geolocation.getCurrentPosition(position => {
      const {
        latitude,
        longitude
      } = position.coords;
      state.location.lat = latitude;
      state.location.lng = longitude;
      return;
    }, err => {
      alert("Unable to access your location, make sure you allow location access.");
    }, options);
  });
};

exports.getPosition = getPosition;

const loadWeatherData = async function () {
  try {
    const lat = state.location.lat;
    const lng = state.location.lng;
    console.log("loading weather...", lat, lng); // Get weather data

    const dataWeather = await (0, _helper.AJAX)(`${_config.WEATHER_API_URL}lat=${lat}&lon=${lng}&units=metric&appid=${_config.WEATHER_API_KEY}`);
    const tz = dataWeather.timezone;
    state.tz = tz;
    saveCurrentWeatherData(dataWeather);
    saveDailyWeatherData(dataWeather.daily);
    saveHourlyWeatherData(dataWeather.hourly);
    const locationData = await (0, _helper.AJAX)(`${_config.GEOCODING_API_URL}q=${lat}+${lng}&key=${_config.GEOCODING_API_KEY}`);
    state.city = locationData.results[0].components.city;
    state.country = locationData.results[0].components.country;
  } catch (err) {
    throw err;
  }
};

exports.loadWeatherData = loadWeatherData;

const getDateTime = function (dt) {
  const dateObj = moment.tz(dt * 1000, state.tz); //date time datas

  const day = _helper.dayNames[dateObj.day()].slice(0, 3);

  const hour = dateObj.hours().toString().padStart(2, 0);
  const min = dateObj.minutes().toString().padStart(2, 0);
  const date = dateObj.date();

  const month = _helper.monthNames[dateObj.month()];

  const timeStr = `${hour}:${min}`;
  return {
    date,
    month,
    day,
    time: timeStr
  };
};

const saveCurrentWeatherData = function (data) {
  const current = data.current;
  const dt = current.dt; //weather report current

  const dtData = getDateTime(dt);
  const dateStr = `${dtData.day}, ${dtData.date} ${dtData.month}`;
  state.current = {
    date: dateStr,
    time: dtData.time,
    temp: `${current.temp > 0 ? "+" + current.temp : current.temp}`,
    humidity: current.humidity,
    precipitation: data.hourly[0].pop,
    windSpeed: (current.wind_speed / 3.6).toFixed(2),
    icon: _helper.weatherIcons[current.weather[current.weather.length - 1].icon]
  };
};

exports.saveCurrentWeatherData = saveCurrentWeatherData;

const saveDailyWeatherData = function (data) {
  const daily = data.map(element => {
    return {
      date: `${getDateTime(element.dt).date} ${getDateTime(element.dt).day}`,
      temp: element.temp.day,
      windSpeed: (element.wind_speed / 3.6).toFixed(2),
      precipitation: element.pop,
      rain: (element === null || element === void 0 ? void 0 : element.rain) ?? 0,
      sunrise: getDateTime(element.sunrise).time,
      sunset: getDateTime(element.sunset).time,
      humidity: element.humidity,
      min: Math.trunc(element.temp.min),
      max: Math.trunc(element.temp.max),
      icon: _helper.weatherIcons[element.weather[element.weather.length - 1].icon]
    };
  });
  state.daily = daily;
};

const saveHourlyWeatherData = function (data) {
  const hourly = data.map(element => {
    return {
      time: getDateTime(element.dt).time,
      temp: element.temp,
      windSpeed: (element.wind_speed / 3.6).toFixed(2),
      precipitation: element.pop,
      humidity: element.humidity,
      icon: element.weather[0].icon
    };
  });
  state.hourly = hourly;
};