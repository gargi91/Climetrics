"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _view = _interopRequireDefault(require("./view.js"));

var _gauge = _interopRequireDefault(require("svg-gauge/dist/gauge.js"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Parcel 2
class ReportView extends _view.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector(".report"));

    _defineProperty(this, "_getLocationBtnEle", document.querySelector("#btn-get-location"));

    _defineProperty(this, "_errorMessage", "We could not get the current weather report!");

    _defineProperty(this, "_message", "");
  }

  _generateMarkup() {
    const data = this._data.current;
    const city = this._data.city;
    const country = this._data.country;
    return `
        <div class="date-time">
            <svg class="date-time__icon">
                <use xlink:href="${_icons.default}#icon-${data.icon}">
                </use>
            </svg>

            <div class="date-time__content">
                <div class="date-time__day">Today</div>
                <div class="date-time__time">${data.time}</div>
                <div class="date-time__date">${data.date}</div>
            </div>
        </div>

        <div class="temperature">${data.temp} &deg;C</div>

        <div class="location">
            <div class="location__city">${city}</div>
            <div class="location__country">${country}</div>
        </div>

        <div class="stats">
            <div class="stats__item stats__item--humidity">
                <h6 class="stats__label">Humidity:</h6>
                <h6 class="stats__value">${data.humidity}%</h6>
                <div class="stats__progress-bar">
                    <div class="stats__bar"></div>
                </div>
            </div>
            <div class="stats__item stats__item--precipation">
                <h6 class="stats__label">Precipation:</h6>
                <h6 class="stats__value">${data.precipitation}%</h6>
                <div class="stats__progress-bar">
                    <div class="stats__bar"></div>
                </div>
            </div>
            <div class="stats__item stats__item--wind">
                <h6 class="stats__label">Wind:</h6>
                <div id="cpuSpeed" class="gauge-container"></div>
                <h6 class="stats__value">${data.windSpeed}Km/h</h6>
            </div>
        </div>
        <button class="btn" id="btn-get-location">Get my location &rarr;</button>
        `;
  }

  updateUI(data) {
    const humidity = data.humidity;
    const precipation = data.precipation;
    const windSpeed = +data.windSpeed;
    const progressBars = document.querySelectorAll(".stats__bar");
    progressBars[0].style.width = `${humidity}%`;
    progressBars[1].style.width = `${precipation}%`; // Create a new Gauge

    var cpuGauge = (0, _gauge.default)(document.getElementById("cpuSpeed"), {
      max: 10,
      showValue: false,
      value: 0,
      // Custom dial colors (Optional)
      color: function () {
        return "#ffae47";
      }
    }); // Set value and animate (value, animation duration in seconds)

    cpuGauge.setValueAnimated(windSpeed, 2);
  }

  addHandlerGetLocation(handler) {
    this._getLocationBtnEle.addEventListener("click", function (e) {
      console.log(e);
      handler();
    });
  }

}

var _default = new ReportView();

exports.default = _default;