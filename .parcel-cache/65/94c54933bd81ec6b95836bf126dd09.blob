"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveCurrentWeatherData = exports.loadWeatherData = exports.getPosition = exports.state = void 0;

var _config = require("./config.js");

var _helper = require("./helper.js");

//State object
const state = {
  location: {
    //setting default location of paris
    lat: 48.8566969,
    lng: 2.3514616
  }
};
exports.state = state;
const options = {
  enableHighAccuracy: true,
  timeout: 5000,
  maximumAge: 0
}; // Getting location using geolocation API

const getPosition = function () {
  return new Promise(function (resolve, reject) {
    navigator.geolocation.getCurrentPosition(position => {
      console.log(position);
    }, err => {
      console.log(state);
    }, options);
  });
};

exports.getPosition = getPosition;

const loadWeatherData = async function () {
  try {
    const lat = state.location.lat;
    const lng = state.location.lng; // Get weather data

    const dataWeather = await (0, _helper.AJAX)(`${_config.WEATHER_API_URL}lat=${lat}&lon=${lng}&appid=${_config.WEATHER_API_KEY}`);
    const tz = dataWeather.timezone;
    const timezone_offset = dataWeather.timezone_offset;
    console.log(dataWeather);
    state.tz = tz;
    state.tz_offset = timezone_offset;
    console.log(tz); // 		// const times = data.daily.map((el) => {
    // 		// 	return getDateTime(el.dt);
    // 		// });

    saveCurrentWeatherData(dataWeather);
    saveDailyWeatherData(dataWeather.daily);
    saveHourlyWeatherData(dataWeather.hourly);
    console.log(state);
  } catch (err) {
    throw err;
  }
};

exports.loadWeatherData = loadWeatherData;

const getDateTime = function (dt) {
  const lang = navigator.language;
  const d = new Date(dt * 1000);
  const offset = d.getTimezoneOffset();
  const offset_diff = offset - state.tz_offset;
  console.log(offset_diff);
  const nd = new Date(dt * 1000 - offset_diff * 60 * 1000);
  console.log(nd); //date time datas

  const dateLocal = new Date(dt * 1000).toLocaleString(lang, {
    timeZone: state.tz
  });
  console.log(dateLocal);
  const dateObj = new Date(dateLocal);
  console.log(dateObj);

  const day = _helper.dayNames[dateObj.getDay()].slice(0, 3);

  const hour = dateObj.getHours();
  const min = dateObj.getMinutes();
  const date = dateObj.getDate();

  const month = _helper.monthNames[dateObj.getMonth()];

  const timeStr = `${hour}:${min}`;
  return {
    date,
    month,
    day,
    time: timeStr
  };
};

const saveCurrentWeatherData = function (data) {
  const current = data.current;
  const dt = current.dt;
  console.log(current); //weather report current

  const dtData = getDateTime(dt);
  const dateStr = `${dtData.day}, ${dtData.date} ${dtData.month}`;
  state.current = {
    date: dateStr,
    time: dtData.time,
    temp: `${current.temp > 0 ? "+" + current.temp : current.temp}`,
    humidity: current.humidity,
    precipitation: data.hourly[0].pop,
    windSpeed: (current.wind_speed / 3.6).toFixed(2),
    icon: _helper.weatherIcons[current.weather[current.weather.length - 1].icon]
  };
};

exports.saveCurrentWeatherData = saveCurrentWeatherData;

const saveDailyWeatherData = function (data) {
  const daily = data.map(element => {
    return {
      date: `${getDateTime(element.dt).date} ${getDateTime(element.dt).day}`,
      temp: element.temp.day,
      windSpeed: (element.wind_speed / 3.6).toFixed(2),
      precipitation: element.pop,
      rain: (element === null || element === void 0 ? void 0 : element.rain) ?? 0,
      sunrise: getDateTime(element.sunrise).time,
      sunset: getDateTime(element.sunset).time,
      humidity: element.humidity,
      min: element.temp.min,
      max: element.temp.max
    };
  });
  state.daily = daily;
};

const saveHourlyWeatherData = function (data) {
  const hourly = data.map(element => {
    return {
      time: getDateTime(element.dt).time,
      temp: element.temp,
      windSpeed: (element.wind_speed / 3.6).toFixed(2),
      precipitation: element.pop,
      humidity: element.humidity,
      icon: element.weather[0].icon
    };
  });
  state.hourly = hourly;
};